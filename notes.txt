HL : USER  -> eng 
LL : SYSTEM  -> 00111011
ML : HL + LL  -> both 


HL -> LL --> Translator -> 

1) compiler 
2) interpreter
3) assembler 

------------------------------------------------------------------------------
1) linear ->  array, stack, queue, linked list ,
2) non linear ->  tree,graph 

------------------------------------------------------------------------------
time complexity -> best case:lower bound , worst case:upper bound ,avg case:  
space complexity -> 
-----------------------------------------------------------------------------
time complexity -> notation -> 3 

BEST CASE -> Omega 

AVG CASE  -> Theta 

WORST CASE -> BigO -> O(1) 
-------------------------------------------------------------------------------
how to calculate? 


#define S 10 

int key=10;
int a[]={1,2,3,4,5,6,7,8,9,0} ;

for(int i=0;i<S;i++){
    if(a[i] == key){
        break; 
    }
}

O(10)
O(20)
O(30)
O(n)




------------------------------------------------------------------------------------------


#define S 10 

int key=10;
int a[]={1,2,3,4,5,6,7,8,9,0} ;

for(int i=0;i<S;i=i+2){//0 2 4  6  8  
    if(a[i] == key || a[i+1] == key){
        break; 
    }
}

O(n/2)
---------------------------------------------------------------------------------------

#define S 5
for(i=1;i<=S;i++){
    for(j=1;j<=i;j++){
        printf("\nRoyal");
    }
}

i   j
1   1
2   12 
3   123 
4   1234 
5   12345 

5 4 3 2 1 0   
1 n-1
2 n-2 
3 n-3 
4 n-4 
5 n-5 0  

n*n-i
-------------------------------------------------------------------------------------

#define S 5
#define P 10 

for(i=1;i<=P;i++){    P 
    for(j=1;j<=S;j++){   S 
        for(k=1;k<=P+S;k++){ 
            printf("\nRoyal");
        }
    }
}

P*P*S => (N^2)*S 

-------------------------------------------------------------------------------------

for 
    S 

for 
    N

for 
    S 


time ? 
S + N + S

O(N) 

N+2S 

------------------------------------------------------------------------------------------

int a;//4 byte -> a variable can hold a single value 

a = 10; 

pf(a); //10 

a = 20 ;

pf(a);//20 



5 numbers -> addition -> 
15 numbers -> addition -> 
115 numbers -> addition -> 


array -> 
    collection of same type of data 
    1 variable name -> we can store n number of items 
    conti ... 

int a[5];//array  X X X X X 
    index 
    subscript 
    starts with : 0 
    ends with :  SIZE - 1 

    first element -> 0th index 
    a[0]

    second -> 1st index 
    a[1]

---------------------------------------------------------------    
Array :- 

1. insert
2. remove 
3. display 
4. exit 

10 20 30 40 50 


shift(){

    10 20 30 40 50 
    time=1 
    50  10  20  30  40
    
    how many times you want to shift? 
    times=2 
    40 50 10 20 30   

    time=3
    30  40  50  10  20 
}


-----------------------------------------------------------------------

(a+b*c


input -> () : valid 
input -> ({}) : valid 
input -> {[)()} :inValid 
input -> {{{{{{{{{{((((()))))}}}}}}}}}} : valid  
index -> {[]}} : inValid

--------------------------------------------------------------------



STACK supports _________________ mechanism ? 
LIFO 

which pointer we use to manage stack ? 
top 


how to check stack is full ? 
top == SIZE - 1 


how to check stack is empty? 
top == -1 


_____________ function is used to insert data in stack. 
PUSH() 

______________ function is used to remove data from stack.
POP()

------------------------------------------------------------------

String character array ->

name -> 

char x; //single character -> r / o / y / a / l



r o y a l  -> total 5 characters 

character array -> 

char x[30]; //royal


printf("%s",x);//royalxlkfjdskfhsdkjfhsdkkdsjhf
            //royal 
            

---------------------------------------------------------------------

array character array -> 
        same type  // 
        static int a[5]; //5 fix  
    
    int a[5]; // int -> float => not possible 
    int float name ->mix type 


structure -> is a collection of mix type of data -> 
          -> struct keyword is used to create a structure 
          -> tagname -> optional 


  movie -> information -> 
    movieName:char[] 
    year:int  


    1. add movie 
    2. print all movies 
    3. search movie 
    4. sort all movie by year 
    5. exit 
    

LifO 
top 

top == -1 => empty 
top == SIZE - 1 

PUSH 
POP 
display 
PEEK 
PEEP 

----------------------------------------------------------------

LiFo -> 
    whatsapp -> 
    history  -> 
    gallery  ->


FIFO -> First In First Out 
Line -> QUEUE
            Printer print -> 
            

----------------------------------------------------------------
Circular Queue -> 


----------------------------------------------------------------

str = (((())))
        valid 
[][][[]](())
    valid 


[{([])}]
    valid 

[[{]]}
    invalid 

{}[ 
   invalid 


----------------------------------------------------------------






































































